require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/flight_plans", type: :request do
  # FlightPlan. As you add validations to FlightPlan, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  let(:email) { 'ragnarcom@googlemail.com' }

  describe "GET /index" do
    let!(:fight_plan) { create(:flight_plan) }
    it "renders a successful response" do
      get flight_plans_url
      expect(response).to be_successful
    end
  end

  describe "POST /delete_all" do
    let!(:fight_plan) { create(:flight_plan) }
    subject { post flight_plans_delete_all_url }

    it "deletes all flight_plans" do
      expect {
        subject
      }.to change { FlightPlan.count }.from(1).to(0)
    end

    it "redirects to flight_plans index" do
      expect(subject).to redirect_to(flight_plans_url)
    end
  end

  describe "POST /download" do
    let(:params) { { email: email } }
    subject { post flight_plans_download_url, params: params }

    it "downloads flight plan from API" do
      expect {
        subject
      }.to change { FlightPlan.count }.from(0).to(1)
    end

    it "redirects to flight_plans index" do
      expect(subject).to redirect_to(flight_plans_url)
    end
  end

  describe 'POST /run' do
    let(:flight_plan) { create(:flight_plan) }
    before {
      create(:movement, sequence_no: 1, direction: "forward", flight_plan: flight_plan)
      create(:turn, sequence_no: 2, instruction: "right", flight_plan: flight_plan)
      create(:movement, sequence_no: 3, direction: "forward", flight_plan: flight_plan)
      create(:movement, sequence_no: 4, direction: "forward", flight_plan: flight_plan)
    }
    let(:params) { { id: flight_plan.id } }
    subject {
      post run_flight_plan_path(flight_plan)
    }
    it 'updates the final x and y values of the flight plan' do
      expect {
        subject
        flight_plan.reload
      }.to change { flight_plan.final_x_location}.from(nil).to(2)
      .and change { flight_plan.final_y_location}.from(nil).to(1)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      flight_plan = FlightPlan.create! valid_attributes
      get flight_plan_url(flight_plan)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_flight_plan_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      flight_plan = FlightPlan.create! valid_attributes
      get edit_flight_plan_url(flight_plan)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new FlightPlan" do
        expect {
          post flight_plans_url, params: { flight_plan: valid_attributes }
        }.to change(FlightPlan, :count).by(1)
      end

      it "redirects to the created flight_plan" do
        post flight_plans_url, params: { flight_plan: valid_attributes }
        expect(response).to redirect_to(flight_plan_url(FlightPlan.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new FlightPlan" do
        expect {
          post flight_plans_url, params: { flight_plan: invalid_attributes }
        }.to change(FlightPlan, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post flight_plans_url, params: { flight_plan: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested flight_plan" do
        flight_plan = FlightPlan.create! valid_attributes
        patch flight_plan_url(flight_plan), params: { flight_plan: new_attributes }
        flight_plan.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the flight_plan" do
        flight_plan = FlightPlan.create! valid_attributes
        patch flight_plan_url(flight_plan), params: { flight_plan: new_attributes }
        flight_plan.reload
        expect(response).to redirect_to(flight_plan_url(flight_plan))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        flight_plan = FlightPlan.create! valid_attributes
        patch flight_plan_url(flight_plan), params: { flight_plan: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested flight_plan" do
      flight_plan = FlightPlan.create! valid_attributes
      expect {
        delete flight_plan_url(flight_plan)
      }.to change(FlightPlan, :count).by(-1)
    end

    it "redirects to the flight_plans list" do
      flight_plan = FlightPlan.create! valid_attributes
      delete flight_plan_url(flight_plan)
      expect(response).to redirect_to(flight_plans_url)
    end
  end
end
